package dp

// 鸡蛋掉落
/**
给你 k 枚相同的鸡蛋，并可以使用一栋从第 1 层到第 n 层共有 n 层楼的建筑。

已知存在楼层 f ，满足0 <= f <= n ，任何从 高于 f 的楼层落下的鸡蛋都会碎，从 f 楼层或比它低的楼层落下的鸡蛋都不会破。

每次操作，你可以取一枚没有碎的鸡蛋并把它从任一楼层 x 扔下（满足1 <= x <= n）。如果鸡蛋碎了，你就不能再次使用它。如果某枚鸡蛋扔下后没有摔碎，则可以在之后的操作中 重复使用 这枚鸡蛋。

请你计算并返回要确定 f 确切的值 的 最小操作次数 是多少？

示例 1：

输入：k = 1, n = 2
输出：2
解释：
鸡蛋从 1 楼掉落。如果它碎了，肯定能得出 f = 0 。
否则，鸡蛋从 2 楼掉落。如果它碎了，肯定能得出 f = 1 。
如果它没碎，那么肯定能得出 f = 2 。
因此，在最坏的情况下我们需要移动 2 次以确定 f 是多少。
示例 2：

输入：k = 2, n = 6
输出：3
示例 3：

输入：k = 3, n = 14
输出：4


提示：

1 <= k <= 100
1 <= n <= 104
*/

func superEggDrop(k int, n int) int {
	// 这个问题可以转换为每走完f层，就要扔一个蛋，要经过k个蛋到或超过N层
	// 现在要找到f，可以定义一个数组，dp[k]代表扔第k次终于到达n层，
	// 在没到达前会一直扔，且每次扔的都是最优解，只到dp[k]>=n就说明最优解找到了
	// 如何求出每次都是最优解，动态规划每次都是最优解，最优解相加就是最终最优解
	f := 0
	// 加1是我们假设已经找到上一个最优解了，得从第二个开始，也就是坐标1，为了避免下面的越界处理麻烦
	dp := make([]int, k+1)
	for ; dp[k] < n; f++ {
		// 每次找到最优解
		for i := k; i > 0; i-- {
			// 加1是因为本层蛋没碎，但是加一层就碎了，因为是最优嘛，上一次肯定没碎，这一层蛋刚好碎了
			// 所以dp[i]的最优就是上一次没碎，但是本次+1碎了的值加上上一个蛋碎的楼层
			dp[i] = dp[i] + dp[i-1] + 1
		}
	}

	return f
}
