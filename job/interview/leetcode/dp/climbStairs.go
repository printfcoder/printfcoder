package dp

/**
爬楼梯

假设你正在爬楼梯。需要 n阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

示例 1：

输入：n = 2
输出：2
解释：有两种方法可以爬到楼顶。
1. 1 阶 + 1 阶
2. 2 阶
示例 2：

输入：n = 3
输出：3
解释：有三种方法可以爬到楼顶。
1. 1 阶 + 1 阶 + 1 阶
2. 1 阶 + 2 阶
3. 2 阶 + 1 阶

提示：

1 <= n <= 45

*/

func climbStairs(n int) int {
	// 到每一楼i有两种路径：从i-1上来，或者从i-2上来
	// 反过来就是说，每一楼的爬法只要爬到前1楼或前2楼就知道了，即
	// 定义一个数组dp[i]代表第i楼有dp[i]爬法
	// 那么dp[i] = dp[i-1] + dp[i-2]

	dp := make([]int, n+1)
	dp[0] = 1
	dp[1] = 2
	for i := 2; i < n; i++ {
		dp[i] = dp[i-1] + dp[i-2]
	}

	return dp[n-1]
}
