package main

//给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
//
// 请注意 ，必须在不复制数组的情况下原地对数组进行操作。
//
//
//
// 示例 1:
//
//
//输入: nums = [0,1,0,3,12]
//输出: [1,3,12,0,0]
//
//
// 示例 2:
//
//
//输入: nums = [0]
//输出: [0]
//
//
//
// 提示:
//
//
//
// 1 <= nums.length <= 10⁴
// -2³¹ <= nums[i] <= 2³¹ - 1

// 使用双指针法，a，b两个指针
// a负责指向上一次0出现的位置，b向右滑动，遇到非0时，a移动过来，遇到0时，交换，a移动，b继续
// 0,1,0,3,12
// 1,0,0,3,12
// 1,3,0,0,12
func moveZeroesWithTwoPoints(nums []int) {
	a, b := 0, 0
	for ; b < len(nums); b++ {
		// 找到0出现的位置
		if nums[b] != 0 {
			nums[a], nums[b] = nums[b], nums[a]
			a++
		} else if nums[a] != 0 { // a的位置是0时，不换
			a = b
		}
	}
}
